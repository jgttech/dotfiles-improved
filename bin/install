#!/usr/bin/env bash
set -euo pipefail

# Indicates that the script is being run in
# development mode.
dev=${DOTFILES_DEV:-false}

# Working directory when the script was called.
# Used to keep track of the origin directory path
# so that the user can be placed back in the same
# path when the installation finishes.
wd=`pwd`

# Set the base directory for where the repo is going
# to be. However, the user can use "DOTFILES_DIR" to
# override where things are down loaded to.
base="${DOTFILES_DIR:-"$HOME/.dotfiles"}"

# The language that should be used to install the CLI
# and defaults to "go" as the default language.
language="${DOTFILES_LANG:-"go"}"

# Which tools we want to install.
tools="tools/$language"

# For now, I only check for the directory that this
# should be built to, but in the future I would like
# to standardize the binary installation process and
# have a standard way to verify it was built.
build="$base/.build"

# What is absolutely required to run the installation.
dependencies=("git" "stow" "jq" "bun" $language)

# Keeps track of what we do not have so that if something
# that is required is missing, we can display what that is
# and tell the user to install it.
missing=()

# Checks if a target binary exists.
function installed {
  command -v $1 &> /dev/null
}

# Check for any missing dependencies.
for dependency in "${dependencies[@]}"; do
  if ! installed $dependency; then
    missing+=("$dependency")
  fi
done

# If we are missing anything, display what we are
# missing so we can install it and re-run it, again.
if [[ ${#missing[@]} -ne 0 ]]; then
  echo ""
  echo "Please install the missing dependencies and try again."

  for dependency in "${missing[@]}"; do
    echo " - $dependency"
  done

  exit 1
fi

# Clone the repo. If running again, then try to
# update the repo, if it has a ".git" dir in it.
if [[ ! -d "$base" ]]; then
  git clone https://github.com/jgttech/dotfiles.git $base
elif [[ -d "$base/.git" && "$dev" == false ]]; then
  cd $base
  git pull
  cd $wd
fi

cd $base
source "bin/init"

# Backup the current configuration, if it exists.
if [[ -f "$HOME/.zshrc" ]]; then
  mv "$HOME/.zshrc" "$HOME/.zshrc.$(date +%s).backup"
fi

if [[ ! -d "$base/$tools" ]]; then
  echo "Tools not found: '$tools'"
  exit 1
fi

tput dim
echo ""
echo "| $(bold "INSTALLATION")"
tput dim
echo "| base.....: $base"
echo "| language.: $language"
echo "| tools....: $tools"
echo "| build....: $build"
echo "| binary...: $binary"
echo "| symlink..: $symlink"
echo ""
tput sgr0

bun --cwd $tools build $symlink $binary

if [[ ! -f "$build/$symlink/$binary" ]]; then
  echo "Failed to build tools: '$tools'"
  exit 1
fi

echo ""
echo "$(bold "Build successful.")"

# Save the build configuration into the build
# directory for use later to make the "reinstall"
# script, so I know what happened when it was
# initially installed.
jq -n '{config: $ARGS.named}' \
  --arg base "$base" \
  --arg language "$language" \
  --arg tools "$tools" \
  --arg build "$build" \
  --arg binary "$binary" \
  --arg symlink "$symlink" \
  > "$build/.dotfiles.build.json"

# Link the build into the system.
stow -t $HOME .build

# Run the installation for the binary.
"$build/$symlink/$binary" install

echo $(green "$(bold "Install successful.")")
cd $wd
